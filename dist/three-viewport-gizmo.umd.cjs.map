{"version":3,"file":"three-viewport-gizmo.umd.cjs","sources":["../lib/utils/getDomContainer.ts","../lib/utils/constants.ts","../lib/utils/getAxesLines.ts","../lib/utils/getDomElement.ts","../lib/utils/getBackgroundSphere.ts","../lib/utils/getSpriteMaterial.ts","../lib/utils/getAxesSpritePoints.ts","../lib/utils/prepareQuaternions.ts","../lib/utils/setRadius.ts","../lib/utils/prepareAnimationData.ts","../lib/utils/updateSpritesOpacity.ts","../lib/utils/isClick.ts","../lib/utils/resetSprites.ts","../lib/utils/updatePointer.ts","../lib/utils/getIntersectionObject.ts","../lib/utils/clamp.ts","../lib/ViewportGizmo.ts"],"sourcesContent":["import { DomPlacement, GizmoOptions } from \"../types\";\n\nexport const getDomContainer = (\n  placement: DomPlacement,\n  size: number,\n  offset: Required<GizmoOptions>[\"offset\"]\n) => {\n  const div = document.createElement(\"div\");\n  const style = div.style;\n\n  const { top, left, right, bottom } = offset;\n\n  style.height = `${size}px`;\n  style.width = `${size}px`;\n  style.borderRadius = \"100%\";\n  style.position = \"absolute\";\n  style.background = \"#fff3\";\n  style.opacity = \"0\";\n  style.zIndex = \"10000\";\n\n  const [y, x] = placement.split(\"-\");\n\n  style.transform = \"\";\n  style.margin = `${top}px ${right}px ${bottom}px ${left}px`;\n  style.left = x === \"left\" ? \"0\" : x === \"center\" ? `50%` : \"\";\n  style.right = x === \"right\" ? \"0\" : \"\";\n  style.transform += x === \"center\" ? \"translateX(-50%)\" : \"\";\n  style.top = y === \"top\" ? \"0\" : y === \"bottom\" ? \"\" : \"50%\";\n  style.bottom = y === \"bottom\" ? \"0\" : \"\";\n  style.transform += y === \"center\" ? \"translateY(-50%)\" : \"\";\n\n  return div;\n};\n","import { GizmoOptions } from \"@lib/types\";\nimport { Color } from \"three\";\n\nexport const GIZMO_AXES = [\"x\", \"y\", \"z\", \"nx\", \"ny\", \"nz\"] as const;\nexport const GIZMO_DEFAULT_OPTIONS: GizmoOptions = {\n  container: document.body,\n  placement: \"top-right\",\n  size: 128,\n  lineWidth: 3,\n  offset: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  x: {\n    text: \"X\",\n    colors: {\n      main: \"#ff3653\",\n    },\n  },\n  y: {\n    text: \"Y\",\n    colors: {\n      main: \"#8adb00\",\n    },\n  },\n  z: {\n    text: \"Z\",\n    colors: {\n      main: \"#2c8fff\",\n    },\n  },\n  nx: {\n    drawLine: false,\n    colors: {\n      main: \"#ff3653\",\n    },\n  },\n  ny: {\n    drawLine: false,\n    colors: {\n      main: \"#8adb00\",\n    },\n  },\n  nz: {\n    drawLine: false,\n    colors: {\n      main: \"#2c8fff\",\n    },\n  },\n  backgroundSphere: {\n    enabled: true,\n    color: 0xffffff,\n    opacity: 0.2,\n  },\n};\nexport const COLOR_MANAGER = new Color();\n","import {\n  BufferAttribute,\n  BufferGeometry,\n  LineBasicMaterial,\n  LineSegments,\n} from \"three\";\nimport { GizmoOptions } from \"../types\";\nimport { COLOR_MANAGER, GIZMO_AXES } from \"./constants\";\n\nexport const getAxesLines = (options: GizmoOptions) => {\n  const positions: number[] = [];\n  const colors: number[] = [];\n\n  GIZMO_AXES.forEach((key, i) => {\n    const axis = options[key]!;\n\n    if (axis.drawLine === false) return;\n\n    const negative = i < 3 ? 1 : -1;\n    const distance = i < 3 ? 0.9 : 1.025;\n\n    positions.push(\n      key.includes(\"x\") ? distance * negative : 0,\n      key.includes(\"y\") ? distance * negative : 0,\n      key.includes(\"z\") ? distance * negative : 0,\n      0,\n      0,\n      0\n    );\n\n    const main = axis.colors!.main!;\n    const [color1, color2] = Array.isArray(main) ? main : [main, main];\n    colors.push(\n      ...COLOR_MANAGER.set(color2).toArray(),\n      ...COLOR_MANAGER.set(color1).toArray()\n    );\n  });\n\n  const geometry = new BufferGeometry();\n  geometry.setAttribute(\n    \"position\",\n    new BufferAttribute(new Float32Array(positions), 3)\n  );\n  geometry.setAttribute(\n    \"color\",\n    new BufferAttribute(new Float32Array(colors), 3)\n  );\n\n  return new LineSegments(\n    geometry,\n    new LineBasicMaterial({\n      linewidth: options.lineWidth ?? 3,\n      vertexColors: true,\n    })\n  );\n};\n","export const getDomElement = (\n  domElement: string | HTMLElement\n): HTMLElement => {\n  const element =\n    typeof domElement === \"string\"\n      ? document.querySelector<HTMLElement>(domElement)\n      : domElement;\n\n  if (!element) throw Error(`Invalid DOM element`);\n\n  return element;\n};\n","import {\n  BackSide,\n  ColorRepresentation,\n  Mesh,\n  MeshBasicMaterial,\n  SphereGeometry,\n} from \"three\";\n\nexport function getBackgroundSphere(color: ColorRepresentation) {\n  const geometry = new SphereGeometry(1.6, 64, 64);\n  const sphere = new Mesh(\n    geometry,\n    new MeshBasicMaterial({\n      color,\n      side: BackSide,\n      transparent: true,\n      opacity: 0,\n      depthTest: false,\n    })\n  );\n\n  return sphere;\n}\n","import {\n  CanvasTexture,\n  RepeatWrapping,\n  SRGBColorSpace,\n  SpriteMaterial,\n} from \"three\";\n\nexport function getSpriteMaterial(\n  color: string,\n  text: string | undefined,\n  textColor: string | null,\n  hover: string | null,\n  hoverText: string | null,\n  border?: boolean\n) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = 128;\n  canvas.height = 64;\n\n  const context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  drawCircle(context, 32, color, border);\n  drawCircle(context, 96, hover || \"#FFF\", border);\n\n  if (text != null) {\n    const long = text.length > 1;\n    const y = long ? 46 : 50;\n    context.font = `bold ${long ? 40 : 48}px helvetica`;\n    context.textAlign = \"center\";\n    context.fillStyle = textColor || \"#000\";\n    context.fillText(text.toUpperCase(), 32, y);\n    context.fillStyle = hoverText || textColor || \"#000\";\n    context.fillText(text.toUpperCase(), 96, y);\n  }\n\n  const texture = new CanvasTexture(canvas);\n  texture.colorSpace = SRGBColorSpace;\n  texture.wrapS = texture.wrapT = RepeatWrapping;\n  texture.repeat.x = 0.5;\n\n  return new SpriteMaterial({\n    map: texture,\n    toneMapped: false,\n    transparent: true,\n  });\n}\n\nfunction drawCircle(\n  context: CanvasRenderingContext2D,\n  x: number,\n  color: string,\n  border?: boolean\n) {\n  const radius = border ? 28 : 32;\n\n  if (border) context.globalAlpha = 0.2;\n  context.beginPath();\n  context.arc(x, 32, radius, 0, 2 * Math.PI);\n  context.closePath();\n  context.fillStyle = color;\n  context.fill();\n\n  if (border) {\n    context.globalAlpha = 1;\n    context.strokeStyle = color;\n    context.lineWidth = 4;\n    context.stroke();\n  }\n}\n","import { Sprite } from \"three\";\nimport { getSpriteMaterial } from \"./getSpriteMaterial\";\nimport { GizmoOptions } from \"@lib/types\";\nimport { COLOR_MANAGER, GIZMO_AXES } from \"./constants\";\n\nexport function getAxesSpritePoints(options: GizmoOptions) {\n  return GIZMO_AXES.map((key, i) => {\n    const { text, colors, border } = options[key]!;\n    const isPositive = i < 3;\n    const axis = (isPositive ? key : key[1]) as \"x\" | \"y\" | \"z\";\n\n    const { text: textColor, main, hover, hoverText } = colors!;\n    const color = Array.isArray(main) ? main[1] : main!;\n    const forceScale = border && text;\n\n    const sprite = new Sprite(\n      getSpriteMaterial(\n        COLOR_MANAGER.set(color).getStyle(),\n        text,\n        (textColor && COLOR_MANAGER.set(textColor).getStyle()) || null,\n        (hover && COLOR_MANAGER.set(hover).getStyle()) || null,\n        (hoverText && COLOR_MANAGER.set(hoverText).getStyle()) || null,\n        border\n      )\n    );\n\n    sprite.userData.type = key;\n    sprite.userData.forceScale = forceScale;\n    sprite.scale.setScalar(forceScale || isPositive ? 0.6 : 0.4);\n    sprite.position[axis] = isPositive ? 1.2 : -1.2;\n    sprite.renderOrder = 1;\n\n    return sprite;\n  });\n}\n","import { Camera, Object3D, Vector3 } from \"three\";\nimport { targetPosition, q1, q2 } from \"../ViewportGizmo\";\n\nconst dummy = new Object3D();\n\nexport function prepareQuaternions(\n  camera: Camera,\n  radius: { value: number },\n  focusPoint: Vector3\n) {\n  targetPosition.multiplyScalar(radius.value).add(focusPoint);\n\n  dummy.position.copy(focusPoint);\n\n  dummy.lookAt(camera.position);\n  q1.copy(dummy.quaternion);\n\n  dummy.lookAt(targetPosition);\n  q2.copy(dummy.quaternion);\n}\n","import { Camera, Vector3 } from \"three\";\n\nexport function setRadius(\n  camera: Camera,\n  radius: {\n    value: number;\n  },\n  focusPoint: Vector3\n) {\n  radius.value = camera.position.distanceTo(focusPoint);\n}\n","import { Euler, OrthographicCamera, PerspectiveCamera, Vector3 } from \"three\";\nimport { targetPosition, targetQuaternion } from \"../ViewportGizmo\";\nimport { prepareQuaternions } from \"./prepareQuaternions\";\nimport { setRadius } from \"./setRadius\";\nimport { GIZMO_AXES } from \"./constants\";\n\nexport function prepareAnimationData(\n  camera: OrthographicCamera | PerspectiveCamera,\n  focusPoint: Vector3,\n  axis: (typeof GIZMO_AXES)[number],\n  radius: { value: number }\n) {\n  switch (axis) {\n    case \"x\":\n      targetPosition.set(1, 0, 0);\n      targetQuaternion.setFromEuler(new Euler(0, Math.PI * 0.5, 0));\n      break;\n\n    case \"y\":\n      targetPosition.set(0, 1, 0);\n      targetQuaternion.setFromEuler(new Euler(-Math.PI * 0.5, 0, 0));\n      break;\n\n    case \"z\":\n      targetPosition.set(0, 0, 1);\n      targetQuaternion.setFromEuler(new Euler());\n      break;\n\n    case \"nx\":\n      targetPosition.set(-1, 0, 0);\n      targetQuaternion.setFromEuler(new Euler(0, -Math.PI * 0.5, 0));\n      break;\n\n    case \"ny\":\n      targetPosition.set(0, -1, 0);\n      targetQuaternion.setFromEuler(new Euler(Math.PI * 0.5, 0, 0));\n      break;\n\n    case \"nz\":\n      targetPosition.set(0, 0, -1);\n      targetQuaternion.setFromEuler(new Euler(0, Math.PI, 0));\n      break;\n\n    default:\n      console.error(\"ViewHelper: Invalid axis.\");\n  }\n\n  setRadius(camera, radius, focusPoint);\n  prepareQuaternions(camera, radius, focusPoint);\n}\n","import { Camera, Sprite, Vector3 } from \"three\";\n\nconst enum Axes {\n  PositiveX,\n  PositiveY,\n  PositiveZ,\n  NegativeX,\n  NegativeY,\n  NegativeZ,\n}\n\nconst point = new Vector3();\n\nexport function updateSpritesOpacity(sprites: Sprite[], camera: Camera) {\n  point.set(0, 0, 1);\n  point.applyQuaternion(camera.quaternion);\n\n  if (point.x >= 0) {\n    sprites[Axes.PositiveX].material.opacity = 1;\n    sprites[Axes.NegativeX].material.opacity = 0.5;\n  } else {\n    sprites[Axes.PositiveX].material.opacity = 0.5;\n    sprites[Axes.NegativeX].material.opacity = 1;\n  }\n\n  if (point.y >= 0) {\n    sprites[Axes.PositiveY].material.opacity = 1;\n    sprites[Axes.NegativeY].material.opacity = 0.5;\n  } else {\n    sprites[Axes.PositiveY].material.opacity = 0.5;\n    sprites[Axes.NegativeY].material.opacity = 1;\n  }\n\n  if (point.z >= 0) {\n    sprites[Axes.PositiveZ].material.opacity = 1;\n    sprites[Axes.NegativeZ].material.opacity = 0.5;\n  } else {\n    sprites[Axes.PositiveZ].material.opacity = 0.5;\n    sprites[Axes.NegativeZ].material.opacity = 1;\n  }\n}\n","import { Vector2 } from \"three\";\n\nexport function isClick(\n  e: PointerEvent,\n  startCoords: Vector2,\n  threshold: number = 10\n) {\n  return (\n    Math.abs(e.clientX - startCoords.x) < threshold &&\n    Math.abs(e.clientY - startCoords.y) < threshold\n  );\n}\n","import { Sprite } from \"three\";\n\nexport function resetSprites(sprites: Sprite[]) {\n  let i = sprites.length;\n\n  while (i--) {\n    sprites[i].scale.setScalar(\n      i < 3 || sprites[i].userData.forceScale ? 0.6 : 0.4\n    );\n    sprites[i].material.map!.offset.x = 1;\n  }\n}\n","import { OrthographicCamera, Vector2 } from \"three\";\nimport { raycaster } from \"../ViewportGizmo\";\n\nconst mouse = new Vector2();\n\nexport function updatePointer(\n  e: PointerEvent,\n  domRect: DOMRect,\n  orthoCamera: OrthographicCamera\n) {\n  mouse.x = ((e.clientX - domRect.left) / domRect.width) * 2 - 1;\n  mouse.y = -((e.clientY - domRect.top) / domRect.height) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, orthoCamera);\n}\n","import { OrthographicCamera, Sprite } from \"three\";\nimport { updatePointer } from \"./updatePointer\";\nimport { raycaster } from \"../ViewportGizmo\";\n\nexport function getIntersectionObject(\n  event: PointerEvent,\n  domRect: DOMRect,\n  orthoCamera: OrthographicCamera,\n  intersectionObjects: Sprite[]\n) {\n  updatePointer(event, domRect, orthoCamera);\n\n  const intersects = raycaster.intersectObjects(intersectionObjects);\n\n  if (!intersects.length) return null;\n\n  const intersection = intersects[0];\n  return intersection.object as Sprite;\n}\n","export function clamp(num: number, min: number, max: number) {\n  return Math.min(Math.max(num, min), max);\n}\n","import {\n  Clock,\n  Euler,\n  LineSegments,\n  Material,\n  Mesh,\n  MeshBasicMaterial,\n  Object3D,\n  OrthographicCamera,\n  PerspectiveCamera,\n  Quaternion,\n  Raycaster,\n  Sprite,\n  Vector2,\n  Vector3,\n  Vector4,\n  WebGLRenderer,\n} from \"three\";\n\nimport { getDomContainer } from \"./utils/getDomContainer\";\nimport { getAxesLines } from \"./utils/getAxesLines\";\nimport { getDomElement } from \"./utils/getDomElement\";\nimport { getBackgroundSphere } from \"./utils/getBackgroundSphere\";\nimport { getAxesSpritePoints } from \"./utils/getAxesSpritePoints\";\nimport { prepareAnimationData } from \"./utils/prepareAnimationData\";\nimport { setRadius } from \"./utils/setRadius\";\nimport { updateSpritesOpacity } from \"./utils/updateSpritesOpacity\";\nimport { isClick } from \"./utils/isClick\";\nimport { resetSprites } from \"./utils/resetSprites\";\nimport { getIntersectionObject } from \"./utils/getIntersectionObject\";\nimport { clamp } from \"./utils/clamp\";\n\nimport { GizmoOptions, ViewportGizmoEventMap } from \"./types\";\nimport { GIZMO_AXES, GIZMO_DEFAULT_OPTIONS } from \"./utils/constants\";\n\nexport const targetPosition = new Vector3();\nexport const targetQuaternion = new Quaternion();\nexport const q1 = new Quaternion();\nexport const q2 = new Quaternion();\nexport const raycaster = new Raycaster();\n\nconst clock = new Clock();\nconst euler = new Euler();\nconst turnRate = 2 * Math.PI; // turn rate in angles per second\n\nconst mouseStart = new Vector2();\nconst mouseAngle = new Vector2();\nconst radius = { value: 0 };\nlet offsetHeight = 0;\n\nexport class ViewportGizmo extends Object3D<ViewportGizmoEventMap> {\n  private _backgroundSphere?: Mesh;\n  private _bgSphereOpacity: number = 0.2;\n  private _spritePoints: Sprite[];\n  private _container: HTMLElement;\n  private _domRect: DOMRect;\n  private _viewport: Vector4 = new Vector4();\n  private _renderer: WebGLRenderer;\n  private _orthoCamera = new OrthographicCamera(-1.8, 1.8, 1.8, -1.8, 0, 4);\n  private _domElement: HTMLElement;\n  enabled: boolean = true;\n  camera: OrthographicCamera | PerspectiveCamera;\n  animated: boolean = true;\n  animating = false;\n  target = new Vector3();\n  dragging: boolean = false;\n  size: number;\n  speed: number = 1;\n\n  constructor(\n    camera: PerspectiveCamera | OrthographicCamera,\n    renderer: WebGLRenderer,\n    options?: GizmoOptions\n  ) {\n    super();\n\n    this._renderer = renderer;\n    this._container = renderer.domElement;\n    this.camera = camera;\n\n    this._orthoCamera.position.set(0, 0, 2);\n\n    options = Object.assign(GIZMO_DEFAULT_OPTIONS, options || {});\n\n    const { container, placement, size, offset, backgroundSphere } =\n      options as Required<GizmoOptions>;\n\n    this.size = size;\n\n    const axesLines = getAxesLines(options);\n    this._spritePoints = getAxesSpritePoints(options);\n\n    this.add(axesLines, ...this._spritePoints);\n\n    if (backgroundSphere.enabled) {\n      this._backgroundSphere = getBackgroundSphere(backgroundSphere.color!);\n      this._bgSphereOpacity = backgroundSphere.opacity ?? 0.2;\n      this.add(this._backgroundSphere);\n    }\n\n    this._domElement = getDomContainer(placement, size, offset);\n    getDomElement(container).appendChild(this._domElement);\n\n    this._domRect = this._domElement.getBoundingClientRect();\n    this._startListening();\n\n    this.update();\n  }\n\n  render() {\n    const delta = clock.getDelta();\n    if (this.animating) this._animate(delta);\n\n    const x = this._domRect.left;\n    const y = offsetHeight - this._domRect.bottom;\n\n    const autoClear = this._renderer.autoClear;\n    this._renderer.autoClear = false;\n    this._renderer.setViewport(x, y, this.size, this.size);\n    this._renderer.render(this, this._orthoCamera);\n    this._renderer.setViewport(this._viewport);\n    this._renderer.autoClear = autoClear;\n  }\n\n  update() {\n    this._domRect = this._domElement.getBoundingClientRect();\n    offsetHeight = this._container.offsetHeight;\n    setRadius(this.camera, radius, this.target);\n    this._renderer.getViewport(this._viewport);\n\n    this._updateOrientation();\n  }\n\n  dispose() {\n    this.children.forEach((child) => {\n      (child as Mesh<any, Material>).material.dispose();\n\n      if ((child as Mesh).isMesh || (child as LineSegments).isLineSegments)\n        (child as Mesh<any, Material>).geometry.dispose();\n      else (child as Mesh<any, MeshBasicMaterial>).material.map?.dispose();\n    });\n\n    this._domElement.remove();\n  }\n\n  // INTERNALS ↓↓↓\n  private _updateOrientation(fromCamera: boolean = true) {\n    if (fromCamera) {\n      this.quaternion.copy(this.camera.quaternion).invert();\n      this.updateMatrixWorld();\n    }\n\n    updateSpritesOpacity(this._spritePoints, this.camera);\n  }\n\n  private _animate(delta: number) {\n    if (!this.animated) {\n      this.camera.quaternion.copy(targetQuaternion);\n      this.animating = false;\n      this.dispatchEvent({ type: \"change\" });\n      this.dispatchEvent({ type: \"end\" });\n      return;\n    }\n\n    const step = delta * turnRate * this.speed;\n\n    q1.rotateTowards(q2, step);\n    this.camera.position\n      .set(0, 0, 1)\n      .applyQuaternion(q1)\n      .multiplyScalar(radius.value)\n      .add(this.target);\n\n    this.camera.quaternion.rotateTowards(targetQuaternion, step);\n\n    this._updateOrientation();\n    this.dispatchEvent({ type: \"change\" });\n\n    if (q1.angleTo(q2) === 0) {\n      this.animating = false;\n      this.dispatchEvent({ type: \"end\" });\n    }\n  }\n\n  private _setOrientation(orientation: (typeof GIZMO_AXES)[number]) {\n    prepareAnimationData(this.camera, this.target, orientation, radius);\n    this.animating = true;\n    this.dispatchEvent({ type: \"start\" });\n  }\n\n  private _startListening() {\n    this._domElement.onpointerdown = (e) => this._onPointerDown(e);\n    this._domElement.onpointermove = (e) => this._onPointerMove(e);\n    this._domElement.onpointerleave = () => this._onPointerLeave();\n  }\n\n  private _onPointerDown(e: PointerEvent) {\n    if (!this.enabled) return;\n\n    const drag = (e: PointerEvent) => {\n      if (!this.dragging && isClick(e, mouseStart)) return;\n      if (!this.dragging) {\n        resetSprites(this._spritePoints);\n        this.dragging = true;\n      }\n\n      mouseAngle\n        .set(e.clientX, e.clientY)\n        .sub(mouseStart)\n        .multiplyScalar((1 / this._domRect.width) * Math.PI);\n\n      this.rotation.x = clamp(\n        rotationStart.x + mouseAngle.y,\n        Math.PI / -2 + 0.001,\n        Math.PI / 2 - 0.001\n      );\n      this.rotation.y = rotationStart.y + mouseAngle.x;\n      this.updateMatrixWorld();\n\n      q1.copy(this.quaternion).invert();\n\n      this.camera.position\n        .set(0, 0, 1)\n        .applyQuaternion(q1)\n        .multiplyScalar(radius.value)\n        .add(this.target);\n\n      this.camera.rotation.setFromQuaternion(q1);\n\n      this._updateOrientation(false);\n\n      this.dispatchEvent({ type: \"change\" });\n    };\n    const endDrag = () => {\n      document.removeEventListener(\"pointermove\", drag, false);\n      document.removeEventListener(\"pointerup\", endDrag, false);\n\n      if (!this.dragging) return this._handleClick(e);\n\n      this.dragging = false;\n      this.dispatchEvent({ type: \"end\" });\n    };\n\n    if (this.animating === true) return;\n    e.preventDefault();\n\n    mouseStart.set(e.clientX, e.clientY);\n\n    const rotationStart = euler.copy(this.rotation);\n\n    setRadius(this.camera, radius, this.target);\n\n    document.addEventListener(\"pointermove\", drag, false);\n    document.addEventListener(\"pointerup\", endDrag, false);\n\n    this.dispatchEvent({ type: \"start\" });\n  }\n\n  private _onPointerMove(e: PointerEvent) {\n    if (!this.enabled || this.dragging) return;\n\n    if (this._backgroundSphere)\n      (this._backgroundSphere.material as Material).opacity =\n        this._bgSphereOpacity;\n\n    this._handleHover(e);\n  }\n\n  private _onPointerLeave() {\n    if (!this.enabled || this.dragging) return;\n\n    if (this._backgroundSphere)\n      (this._backgroundSphere.material as Material).opacity = 0;\n\n    resetSprites(this._spritePoints);\n    this._domElement.style.cursor = \"\";\n  }\n\n  private _handleClick(e: PointerEvent) {\n    const object = getIntersectionObject(\n      e,\n      this._domRect,\n      this._orthoCamera,\n      this._spritePoints\n    );\n\n    if (!object) return;\n\n    this._setOrientation(object.userData.type);\n    this.dispatchEvent({ type: \"change\" });\n  }\n\n  private _handleHover(e: PointerEvent) {\n    const object = getIntersectionObject(\n      e,\n      this._domRect,\n      this._orthoCamera,\n      this._spritePoints\n    );\n\n    resetSprites(this._spritePoints);\n\n    if (!object) {\n      this._domElement.style.cursor = \"\";\n    } else {\n      object.material.map!.offset.x = 0.5;\n      object.scale.multiplyScalar(1.2);\n      this._domElement.style.cursor = \"pointer\";\n    }\n  }\n}\n"],"names":["getDomContainer","placement","size","offset","div","style","top","left","right","bottom","y","x","GIZMO_AXES","GIZMO_DEFAULT_OPTIONS","COLOR_MANAGER","Color","getAxesLines","options","positions","colors","key","i","axis","negative","distance","main","color1","color2","geometry","BufferGeometry","BufferAttribute","LineSegments","LineBasicMaterial","getDomElement","domElement","element","getBackgroundSphere","color","SphereGeometry","Mesh","MeshBasicMaterial","BackSide","getSpriteMaterial","text","textColor","hover","hoverText","border","canvas","context","drawCircle","long","texture","CanvasTexture","SRGBColorSpace","RepeatWrapping","SpriteMaterial","radius","getAxesSpritePoints","isPositive","forceScale","sprite","Sprite","dummy","Object3D","prepareQuaternions","camera","focusPoint","targetPosition","q1","q2","setRadius","prepareAnimationData","targetQuaternion","Euler","point","Vector3","updateSpritesOpacity","sprites","isClick","e","startCoords","threshold","resetSprites","mouse","Vector2","updatePointer","domRect","orthoCamera","raycaster","getIntersectionObject","event","intersectionObjects","intersects","clamp","num","min","max","Quaternion","Raycaster","clock","Clock","euler","turnRate","mouseStart","mouseAngle","offsetHeight","ViewportGizmo","renderer","__publicField","Vector4","OrthographicCamera","container","backgroundSphere","axesLines","delta","autoClear","child","_a","fromCamera","step","orientation","drag","rotationStart","endDrag","object"],"mappings":"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"}